{"version":3,"sources":["Components/NavBar.jsx","Components/Footer.jsx","Components/Home.jsx","Components/Beliefs.jsx","Components/AppContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","about","connect","sermons","contact","Navbar","className","collapseOnSelect","expand","variant","Brand","id","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","onMouseEnter","setState","onMouseLeave","show","this","title","Item","Component","Footer","Home","style","backgroundImage","backgroundSize","overflow","backgroundPosition","backgroundRepeat","Beliefs","AppContainer","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAwDeA,G,kNAjDbC,MAAQ,CACNC,OAAO,EACPC,SAAS,EACTC,SAAS,EACTC,SAAS,G,uDAGD,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,SAASC,kBAAgB,EAACC,OAAO,KAAKC,QAAQ,QAC9D,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,GAAG,WAAWC,KAAK,KAAjC,SACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBJ,GAAG,yBAClB,kBAACK,EAAA,EAAD,CAAKV,UAAU,WACb,kBAACW,EAAA,EAAD,CACEC,aAAiB,kBAAM,EAAKC,SAAS,CAAElB,OAAO,KAC9CmB,aAAiB,kBAAM,EAAKD,SAAS,CAAElB,OAAO,KAC9CoB,KAAOC,KAAKtB,MAAMC,MAClBsB,MAAM,QAAQZ,GAAG,2BACf,kBAACM,EAAA,EAAYO,KAAb,CAAkBb,GAAG,UAAUC,KAAK,YAApC,oBAEJ,kBAACK,EAAA,EAAD,CACEC,aAAiB,kBAAM,EAAKC,SAAS,CAAEjB,SAAS,KAChDkB,aAAiB,kBAAM,EAAKD,SAAS,CAAEjB,SAAQ,KAC/CmB,KAAOC,KAAKtB,MAAME,QAClBqB,MAAM,UAAUZ,GAAG,2BACnB,kBAACM,EAAA,EAAYO,KAAb,CAAkBZ,KAAK,eAAvB,WAEF,kBAACK,EAAA,EAAD,CACEC,aAAiB,kBAAM,EAAKC,SAAS,CAAEhB,SAAS,KAChDiB,aAAiB,kBAAM,EAAKD,SAAS,CAAEhB,SAAQ,KAC/CkB,KAAOC,KAAKtB,MAAMG,QAClBoB,MAAM,UAAUZ,GAAG,2BACnB,kBAACM,EAAA,EAAYO,KAAb,CAAkBZ,KAAK,eAAvB,WAEF,kBAACK,EAAA,EAAD,CACEC,aAAiB,kBAAM,EAAKC,SAAS,CAAEf,SAAS,KAChDgB,aAAiB,kBAAM,EAAKD,SAAS,CAAEf,SAAQ,KAC/CiB,KAAOC,KAAKtB,MAAMI,QAClBmB,MAAM,UAAUZ,GAAG,2BACnB,kBAACM,EAAA,EAAYO,KAAb,CAAkBZ,KAAK,eAAvB,kB,GAzCOa,cCWNC,E,uKAVX,OACE,yBAAKpB,UAAU,UACb,iEACA,oD,GANamB,aCkBNE,E,uKAZX,OACE,yBAAKrB,UAAU,QACb,kBAAC,EAAD,MACA,yBAAKsB,MAAO,CAAEC,gBAAgB,OAAD,OAAS,cAAT,KAA2BC,eAAgB,QAASC,SAAU,SAAUC,mBAAoB,SAAUC,iBAAoB,aAAe3B,UAAU,QAAhL,0BAGA,kBAAC,EAAD,W,GAXWmB,aCeJS,E,uKAXX,OACE,yBAAK5B,UAAU,WACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,QAAf,mBACA,kBAAC,EAAD,W,GARcmB,aCkBPU,E,uKAXX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,WAAWC,UAAWJ,U,GAPvBT,aCMZc,E,uKAPX,OACE,kBAAC,EAAD,U,GALYd,aCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d7f5d5c1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Collapse, Button, Form, FormControl, Navbar, Nav, NavItem, NavDropdown } from 'react-bootstrap';\nimport \"../CSS/Styling.css\";\nimport {Dropdown} from 'react-bootstrap'\n// import { Collapse } from 'react-transition-group';\n\nclass NavBar extends Component {\n  state = {\n    about: false,\n    connect: false,\n    sermons: false,\n    contact: false\n  };\n\n  render() {\n    return (\n      <Navbar className=\"navbar\" collapseOnSelect expand=\"lg\" variant=\"dark\">\n        <Navbar.Brand id=\"navBrand\" href=\"/\">CEFCA</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown\n              onMouseEnter = { () => this.setState({ about: true })}\n              onMouseLeave = { () => this.setState({ about: false })}\n              show={ this.state.about }\n              title=\"About\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item id=\"navItem\" href=\"/beliefs\">What We Believe</NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown\n              onMouseEnter = { () => this.setState({ connect: true })}\n              onMouseLeave = { () => this.setState({ connect:false })}\n              show={ this.state.connect }\n              title=\"Connect\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown \n              onMouseEnter = { () => this.setState({ sermons: true })}\n              onMouseLeave = { () => this.setState({ sermons:false })}\n              show={ this.state.sermons }\n              title=\"Sermons\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown \n              onMouseEnter = { () => this.setState({ contact: true })}\n              onMouseLeave = { () => this.setState({ contact:false })}\n              show={ this.state.contact }\n              title=\"Contact\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    )\n  }\n}\n\nexport default NavBar;","import React, { Component } from \"react\";\nimport { Button, Form, FormControl, MenuItem } from 'react-bootstrap';\nimport \"../CSS/Styling.css\";\n\nclass Footer extends Component {\n\n  render() {\n    return (\n      <div className=\"footer\">\n        <div>4911 Lincoln Way, Ames, IA 50014</div>\n        <div>(515) 233-4436</div>\n      </div>\n      \n    )\n  }\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport NavBar from \"./NavBar\"\nimport Footer from \"./Footer\";\nimport \"../CSS/Styling.css\";\n\nclass Home extends Component {\n\n  \n  render() {\n\n    return (\n      <div className=\"home\">\n        <NavBar />\n        <div style={{ backgroundImage: `url(${'/cross3.jpg'})`, backgroundSize: 'cover', overflow: 'hidden', backgroundPosition: 'center', backgroundRepeat  : 'no-repeat' }} className=\"body\">\n          Welcome | 欢迎\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport { Button, Form, FormControl, MenuItem } from 'react-bootstrap';\nimport \"../CSS/Styling.css\";\nimport NavBar from \"./NavBar\";\nimport Footer from \"./Footer\";\n\nclass Beliefs extends Component {\n\n  render() {\n    return (\n      <div className=\"beliefs\">\n        <NavBar />\n\n        <div className=\"body\">beliefs section</div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default Beliefs;","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route\n} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport NavBar from \"./NavBar\"\nimport Beliefs from \"./Beliefs\"\nclass AppContainer extends Component {\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/beliefs\" component={Beliefs} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default AppContainer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppContainer from \"./Components/AppContainer\";\nimport { Button, Form, FormControl, Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\n\nclass App extends Component {\n\n  render() {   \n    \n    return (\n      <AppContainer />\n      \n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}